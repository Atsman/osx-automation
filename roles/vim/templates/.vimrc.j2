set nocompatible

" >> Vundle setup start
set rtp+=~/.config/nvim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/syntastic'
Plugin 'w0rp/ale'
Plugin 'tpope/vim-surround'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'bling/vim-airline'
Plugin 'pangloss/vim-javascript'
Plugin 'posva/vim-vue'
Plugin 'honza/vim-snippets'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'tpope/vim-fireplace'
Plugin 'venantius/vim-cljfmt'
Plugin 'paredit.vim'
Plugin 'dracula/vim'
Plugin 'derekwyatt/vim-scala'
Plugin 'fatih/vim-go'
if has('nvim')
  Plugin 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plugin 'Shougo/deoplete.nvim'
  Plugin 'roxma/nvim-yarp'
  Plugin 'roxma/vim-hug-neovim-rpc'
endif
Plugin 'zchee/deoplete-go'
Plugin 'clojure-vim/async-clj-omni'
Plugin 'mileszs/ack.vim'
Plugin 'nvie/vim-flake8'
Plugin 'zchee/deoplete-jedi'
call vundle#end()
" >> Vundle setup end

filetype indent plugin on
filetype plugin on

syntax on

set langmenu=en_US
set hidden
set showcmd
set hlsearch
set autoindent
set nostartofline
set ruler
set laststatus=2
set confirm
set number
set shiftwidth=2
set softtabstop=2
set expandtab
set shiftwidth=2
set smarttab

set mouse=nv

set clipboard=unnamed

" Enable project specific .nvimrc files
set exrc
set secure

set runtimepath^=~/.config/nvim/bundle/ctrlp.vim
set wildignore+=*/tmp/*,*.so,*.swp,*.zip

set completeopt=menu,preview
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

if executable('ag')
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
  let g:ackprg = 'ag --vimgrep'
endif

set splitbelow
set splitright

" Dracula theme settings
let g:dracula_colorterm=0
colorscheme dracula
color dracula

let NERDTreeShowHidden=1

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:statline_syntastic = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_aggregate_errors = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1

let g:syntastic_mode_map = {
        \ "mode": "active",
        \ "active_filetypes": [],
        \ "passive_filetypes": ["scala", "go"] }

let g:deoplete#enable_at_startup = 1
let g:deoplete#keyword_patterns = {}

" Vim gitgutter
set updatetime=100
set rtp+=/usr/local/opt/fzf

let g:python_host_prog = "{{ python_venv_path | expanduser }}/bin/python"
let g:python3_host_prog = "{{ python3_venv_path | expanduser }}/bin/python"
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF
